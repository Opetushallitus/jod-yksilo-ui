name: Deploy
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: 'Environment to deploy to'
        required: true
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        options:
          - development
          - test
      run-id:
        type: string
        description: 'Build workflow run id'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to interact with GitHub's OIDC Token endpoint
      contents: read
      actions: read
    environment: ${{ inputs.environment }}
    concurrency:
      group: deploy-${{ inputs.environment }}
    steps:
      - name: Create production tag via GitHub API
        if: inputs.environment == 'production'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

          BASE_VERSION="rel-$(date -u +'%Y%m%d')"
          COMMIT_SHA="${GITHUB_SHA}"

          VERSION="${BASE_VERSION}-1"
          i=2

          while gh api repos/${{ github.repository }}/git/ref/tags/$VERSION >/dev/null 2>&1; do
            VERSION="${BASE_VERSION}-$i"
            i=$((i+1))
          done

          echo "Creating tag $VERSION for commit $COMMIT_SHA"

          gh api \
            repos/${{ github.repository }}/git/refs \
            -f ref="refs/tags/$VERSION" \
            -f sha="$COMMIT_SHA"

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run-id || github.run_id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.JOD_AWS_ACCOUNT_ID }}:role/${{ secrets.JOD_AWS_GITHUB_ROLE_NAME}}
          aws-region: eu-west-1

      - name: Copy files to S3
        run: |
          aws s3 sync --size-only --delete --cache-control "public,max-age=31536000,immutable" assets/ s3://${{ secrets.JOD_AWS_DIST_BUCKET }}/yksilo/assets
          aws s3 sync --exclude "assets/*" --delete --cache-control "public,max-age=0,s-maxage=60,must-revalidate" . s3://${{ secrets.JOD_AWS_DIST_BUCKET }}/yksilo
